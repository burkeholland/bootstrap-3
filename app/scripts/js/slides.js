// Generated by CoffeeScript 1.6.3
(function() {
  var bootstrap, effectsQueue, events, fit, next, paused, previous, queueEffects, reset, show, slide, slideNumber, slides, totalSlides, view, viewModel;

  slideNumber = 1;

  slide = null;

  view = new kendo.View("<div>");

  effectsQueue = [];

  reset = {};

  paused = false;

  slides = $(".slide");

  totalSlides = slides.length;

  $(document).keydown(function(e) {
    if (!paused) {
      if (e.keyCode === 37) {
        previous();
        return false;
      }
      if (e.keyCode === 39) {
        next();
        return false;
      }
    }
  });

  $.subscribe("/slides/show", function(e, index) {
    return show(index);
  });

  queueEffects = function(element) {
    return effectsQueue = element.find("[data-effect]");
  };

  show = function(index) {
    var event, previousSlide;
    if (index < 1 || index > totalSlides) {
      return false;
    }
    previousSlide = slide;
    slide = $(slides[index - 1]);
    effectsQueue = slide.find("[data-effect]");
    if (previousSlide) {
      if (slide.data("transition")) {
        kendo.fx(previousSlide).fade("in").stop().duration(500).reverse().then(function() {
          slide.show();
          fit(slide);
          return kendo.fx(slide).fade("in").duration(500).stop().play().then;
        });
      } else {
        previousSlide.hide();
        slide.show();
      }
    } else {
      slide.show();
    }
    fit(slide);
    $.publish("/effects/setup", [slide]);
    slideNumber = index;
    event = slide.find("[data-show]");
    return event.each(function() {
      return events[event.data("show")](this);
    });
  };

  fit = function(el) {
    var size;
    el = $(el).find(".fit");
    size = el.data("fit");
    el.fitText(size);
    return $(el).find(".fit-large").fitText(.2);
  };

  previous = function() {
    $.publish("/effects/reset");
    slideNumber -= 1;
    return $.publish("/router/navigate", ["/slides/" + slideNumber]);
  };

  next = function() {
    if (effectsQueue.length > 0) {
      return $.publish("/effects/process", [effectsQueue[0]]);
    } else {
      slideNumber += 1;
      return $.publish("/router/navigate", ["/slides/" + slideNumber]);
    }
  };

  $.subscribe("/effects/done", function() {
    return effectsQueue.splice(0, 1);
  });

  bootstrap = true;

  viewModel = kendo.observable({
    toggleBootstrap: function() {
      var $bootstrap;
      $bootstrap = $("#bootstrap");
      if (bootstrap) {
        $bootstrap.attr("rel", "notastylesheet");
        return bootstrap = false;
      } else {
        $bootstrap.attr("rel", "stylesheet");
        return bootstrap = true;
      }
    },
    pauseControls: function() {
      return paused = true;
    },
    unpauseControls: function() {
      paused = false;
      return this.set("editorVisible", false);
    },
    updateSampleQuery: function(e) {
      var style;
      style = $("#scoped-sample-query");
      style.html($(e.currentTarget).text());
      return paused = false;
    },
    screenSize: $(window).width(),
    updateHtml: function(e) {
      return setTimeout(function() {
        var source, target;
        source = $(e.currentTarget);
        target = slide.find(source.data("target"));
        if (target.length > 0) {
          return slide.find(target).html(source.text());
        } else {
          return source.next().html(source.text());
        }
      }, 100);
    },
    containerWidth: 0,
    containerPadding: 0,
    containerMargin: 0,
    editorVisible: false,
    showEditor: function() {
      var visible;
      visible = this.get("editorVisible");
      if (visible) {
        return this.set("editorVisible", false);
      } else {
        return this.set("editorVisible", true);
      }
    }
  });

  kendo.bind("body", viewModel);

  $(window).resize(function() {
    viewModel.set("screenSize", $(this).width());
    return viewModel.set("containerWidth", $(".container-demo").width());
  });

  events = {
    setContainerSize: function(el) {
      var $el;
      $el = $(el);
      viewModel.set("containerWidth", $el.width());
      viewModel.set("containerPadding", $el.css("padding"));
      return viewModel.set("containerMargin", $el.css("margin"));
    }
  };

}).call(this);
